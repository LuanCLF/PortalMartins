// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PortalMartins.INFRA.Context;

#nullable disable

namespace PortalMartins.INFRA.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PortalMartins.CORE.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<char>("Category")
                        .HasColumnType("character(1)");

                    b.Property<float>("Classification")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CameFrom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WhatIsIt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.Events", b =>
                {
                    b.HasBaseType("PortalMartins.CORE.Entities.Post");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("EventLocation");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.Feeding", b =>
                {
                    b.HasBaseType("PortalMartins.CORE.Entities.Post");

                    b.Property<bool>("Delivery")
                        .HasColumnType("boolean")
                        .HasColumnName("Delivery");

                    b.Property<bool>("Parking")
                        .HasColumnType("boolean")
                        .HasColumnName("Parking");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Type");

                    b.Property<bool>("Wifi")
                        .HasColumnType("boolean")
                        .HasColumnName("Wifi");

                    b.ToTable("Feeding", (string)null);
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.Hosting", b =>
                {
                    b.HasBaseType("PortalMartins.CORE.Entities.Post");

                    b.Property<int>("Bathroom")
                        .HasColumnType("integer")
                        .HasColumnName("Bathroom");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("integer")
                        .HasColumnName("Bedrooms");

                    b.Property<bool>("Garden")
                        .HasColumnType("boolean")
                        .HasColumnName("Garden");

                    b.Property<bool>("Kitchen")
                        .HasColumnType("boolean")
                        .HasColumnName("Kitchen");

                    b.Property<bool>("ServiceArea")
                        .HasColumnType("boolean")
                        .HasColumnName("ServiceArea");

                    b.Property<int>("Vacancy")
                        .HasColumnType("integer")
                        .HasColumnName("Vacancy");

                    b.ToTable("Hosting", (string)null);
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.Post", b =>
                {
                    b.HasOne("PortalMartins.CORE.Entities.User", null)
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.Events", b =>
                {
                    b.HasOne("PortalMartins.CORE.Entities.Post", null)
                        .WithOne()
                        .HasForeignKey("PortalMartins.CORE.Entities.Events", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.Feeding", b =>
                {
                    b.HasOne("PortalMartins.CORE.Entities.Post", null)
                        .WithOne()
                        .HasForeignKey("PortalMartins.CORE.Entities.Feeding", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.Hosting", b =>
                {
                    b.HasOne("PortalMartins.CORE.Entities.Post", null)
                        .WithOne()
                        .HasForeignKey("PortalMartins.CORE.Entities.Hosting", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalMartins.CORE.Entities.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
